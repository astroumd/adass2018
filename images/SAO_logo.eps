%!PS-Adobe-2.0 EPSF-1.2
%%Title: 
%%Creator: Frame 5.5
%%CreationDate: 18 14:12 SAOLogo.ps
%%For:arots arots
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 176 90 436 672
%%BeginPreview: 260 582 1 582
% 000000000000000000000000000000000000300000000000000000000000000000
% 000000000000000000000000000000000000300000000000000000000000000000
% 000000000000000000000000000000000000300000000000000000000000000000
% 000000000000000000000000000000000000700000000000000000000000000000
% 0000000000000000000000000000fffffffff00000000000000000000000000000
% 0000000000000000000000000000fffffffff00000000000000000000000000000
% 0000000000000000000000000000fffffffff00000000000000000000000000000
% 00000000000000000000000000007ffffffff00000000000000000000000000000
% 00000000000000000000000000007ffffffff00000000000000000000000000000
% 000000000000000000000000000060000000300000000000000000000000000000
% 000000000000000000000000000060000000300000000000000000000000000000
% 000000000000000000000000000060000000300000000000000000000000000000
% 000000000000000000000000000060000000300000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000600000000000000000000000000000
% 000000000000000000000000000000000000700000000000000000000000000000
% 000000000000000000000000000000000000380000000000000000000000000000
% 000000000000000000000000000000000000780000000000000000000000000000
% 000000000000000000000000000000007ffff80000000000000000000000000000
% 00000000000000000000000000000001fffff80000000000000000000000000000
% 0000000000000000000000c000000001fffff00000000000000000000000000000
% 0000000000000000000000c000000003ffffe00000000000000000000000000000
% 0000000000000000000000c000000007ffffc00000000000000000000000000000
% 0000000000000000000000c0000000078303c00000000000000000000000000000
% 000000000000000000ffffc0000000070380e00000000000000000000000000000
% 000000000000000003ffffc0000000070380700000000000000000000000000000
% 000000000000000007ffffc0000000060180300000000000000000000000000000
% 00000000000000000fffffc0000000060180380000000000000000000000000000
% 00000000000000000fffffc00000000601c0180000000080000000000000000000
% 00000000000000001f8000c00000000601c01800000000c0000000000000000000
% 00000000000000001e0000c00000000700c01800000000c0000000000000000000
% 00000000000000001e0000c00000000738e03800000000e0000000000000000000
% 00000000000000001c0000c000000003fcf8f800000000f8000000000000000000
% 00000000000000001c00000000000003fc7ff800000000fe000000000000000000
% 00000000000000001c00000000000001fc3ff000000000ffc00000000000000000
% 00000000000000000e0000c000000000fc3ff000000000c7f00000000000000000
% 0000000000000000060000c000000000781fe000000000c0fe0000000000000000
% 0000000000000000030000c0000000000007c000000000c03f8000000000000000
% 000000000000000001c000c000000000000000000000000007f000000000000000
% 00000000000000001fffffc000000000000000000000000001fc00000000000000
% 00000000000000001fffffc000000000000000000000000007ff00000000000000
% 00000000000000000fffffc000000000f8070000000000001fffc0000000000000
% 00000000000000000fffffc000000001fc07c000000000c07ff1f0000000000000
% 00000000000000000fffffc000000003fc01e000000000c3ffc078000000000000
% 00000000000000000c0000c000000003fc00f000000000cfff001c000000000000
% 00000000000000000c0000c000000007fc007000000000fffc000e000000000000
% 00000000000000000c0000c00000000738003800000000ffe00006000000000000
% 00000000000000000c0000c00000000600003800000000ff800003000000000000
% 0000000000000000000000000000000600003800000000fe000013000000000000
% 0000000000000000000001800000000600003800000000f000003f000000000000
% 0000000000000000000001c00000000700007800000000c000007f000000000000
% 0000000000000000000000e00000000700007800000000c000007f000000000000
% 0000000000000000000001e000000003c001f800000000c000003e000000000000
% 000000000000000001ffffe000000003f80ff0000000008000003c000000000000
% 000000000000000007ffffe000000001ffffe00000000078000000000000000000
% 000000000000000007ffffc000000000ffffe000000000fc000000000000000000
% 00000000000000000fffff80000000007fff8000000001fc000000000000000000
% 00000000000000001fffff00000000003fff0000000001fc000000000000000000
% 00000000000000001e0c0f000000000007fc0000000001fc000000000000000000
% 00000000000000001c0e03800000000000000000000001f8000000000000000000
% 00000000000000001c0e01c00000000000000000000001c0000000000000000000
% 0000000000000000180600c00000000000000000000000e0000c00000000000000
% 0000000000000000180600e0000000000000300000000070000c00000000000000
% 00000000000000001807006000000000000030000000003c000c00000000000000
% 00000000000000001807006000000000000030000000001f800c00000000000000
% 00000000000000001c0300600000000000007000000000fffffc00000000000000
% 00000000000000001ce380e000003c07fffff000000001fffffc00000000000000
% 00000000000000000ff3e3e000007e07fffff000000000fffffc00000000000000
% 00000000000000000ff1ffe000007e07fffff000000000fffffc00000000000000
% 000000000000000007f0ffc000007e03fffff000000000fffffc00000000000000
% 000000000000000003f0ffc000003c03fffff000000000c0000c00000000000000
% 000000000000000001e07f800000000300003000000000c0000c00000000000000
% 000000000000000000001f000000000300003000000000c0000c00000000000000
% 0000000000000000000000000000000300003000000000c0000c00000000000000
% 000000000000000000000000000000030000300000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000c0000000000000000000000000000000000000000000
% 0000000000000000000000c0000000000000000000000001fe0000000000000000
% 0000000000000000000000c000000000003f80000000000fffc000000000000000
% 0000000000000000000001c000000007f87fc0000000001fffe000000000000000
% 00000000000000f01fffffc000000007f8ffe0000000003ffff000000000000000
% 00000000000001f81fffffc000000003f1f8f0000000007ffff800000000000000
% 00000000000001f81fffffc000000003c1f03800000000fe01fc00000000000000
% 00000000000001f80fffffc00000000381f03800000000e0003c00000000000000
% 00000000000000f00fffffc00000000703f01800000001c0000e00000000000000
% 00000000000000000c0000c00000000703e0180000000180000600000000000000
% 00000000000000000c0000c00000000603e0180000000180000600000000000000
% 00000000000000000c0000c00000000603e0180000000180000600000000000000
% 00000000000000000c0000c00000000607e0380000000180000600000000000000
% 0000000000000000000000000000000607c03000000001c0000e00000000000000
% 0000000000000000000000000000000707c07000000000e0001c00000000000000
% 0000000000000000000000c0000000038fc0e000000000fe01fc00000000000000
% 0000000000000000000000c000000003ff83e0000000007ffff800000000000000
% 0000000000000000000000c000000001ff0ff0000000003ffff000000000000000
% 0000000000000000000000c0000000007e1ff8000000001fffe000000000000000
% 000000000000000000ffffc000000000000ff0000000000fff8000000000000000
% 000000000000000003ffffc0000000000000000000000003fe0000000000000000
% 000000000000000007ffffc0000000000000000000000000000000000000000000
% 00000000000000000fffffc0000000020000000000000000000000000000000000
% 00000000000000000fffffc0000000030000000000000000000000000000000000
% 00000000000000001f8000c000000003000000000000000007c000000000000000
% 00000000000000001e0000c00000000380000000000000c007f000000000000000
% 00000000000000001e0000c000000003e0000000000000c001f800000000000000
% 00000000000000001c0000c000000003f8000000000000c0001c00000000000000
% 00000000000000001c00000000000003ff000000000000c0000e00000000000000
% 00000000000000001c000000000000031fc00000000000c0000e00000000000000
% 00000000000000000e0000c00000000303f80000000000c0000e00000000000000
% 0000000000000000060000c00000000300fe0000000000c0001e00000000000000
% 0000000000000000030000c000000000001fc0000003fffffffe00000000000000
% 000000000000000001c000c0000000000007f0000003fffffffe00000000000000
% 00000000000000001fffffc000000000001ffc000003fffffffc00000000000000
% 00000000000000001fffffc000000000007fff0000003ffffff800000000000000
% 00000000000000000fffffc00000000301ffc7c0000007fffff000000000000000
% 00000000000000000fffffc0000000030fff01e0000003c0000000000000000000
% 00000000000000000fffffc0000000033ffc0070000001c0000000000000000000
% 00000000000000000c0000c000000003fff00038000001c0000000000000000000
% 00000000000000000c0000c000000003ff800018000000c0000000000000000000
% 00000000000000000c0000c000000003fe00000c00000000000000000000000000
% 00000000000000000c0000c000000003f800004c00000000000000000000000000
% 00000000000000000000000000000003c00000fc00000000001800000000000000
% 00000000000000000000000000000003000001fc00000000001c00000000000000
% 00000000000000000000000000000003000001fc00000000000e00000000000000
% 0000000000000000001fe00000000003000000f800000000001e00000000000000
% 000000000000000000fffc0000000002000000f00000001ffffe00000000000000
% 000000000000000001fffe0000000000000000000000007ffffe00000000000000
% 000000000000000003ffff0000000000000030000000007ffffc00000000000000
% 000000000000000007ffff800000000000003000000000fffff800000000000000
% 00000000000000000fe01fc00000000000003000000001fffff000000000000000
% 00000000000000000e0003c00000000000003000000001e0c0f000000000000000
% 00000000000000001c0000e0000000003ffff000000001c0e03800000000000000
% 00000000000000001800006000000000fffff000000001c0e01c00000000000000
% 00000000000000001800006000000001fffff00000000180600c00000000000000
% 00000000000000001800006000000003fffff00000000180600e00000000000000
% 00000000000000001800006000000003fffff00000000180700600000000000000
% 00000000000000001c0000e000000007e000300000000180700600000000000000
% 00000000000000000e0001c00000000780003000000001c0300600000000000000
% 00000000000000000fe01fc00000000780003000000001ce380e00000000000000
% 000000000000000007ffff800000000700003000000000ff3e3e00000000000000
% 000000000000000003ffff000000000700000000000000ff1ffe00000000000000
% 000000000000000001fffe0000000007000000000000007f0ffc00000000000000
% 000000000000000000fff80000000003800030000000003f0ffc00000000000000
% 0000000000000000003fe00000000001800030000000001e07f800000000000000
% 00000000000000000000000000000000c00030000000000001f000000000000000
% 000000000000000000000000000000007000300000000000000000000000000000
% 0000000000000000000000000000fffffffff00000000080000000000000000000
% 0000000000000000000000000000fffffffff000000000c0000000000000000000
% 00000000000000000000fe000000fffffffff000000000c0000000000000000000
% 00000000000000001fe1ff0000007ffffffff000000000e0000000000000000000
% 00000000000000001fe3ff8000007ffffffff000000000f0000000000000000000
% 00000000000000000fc7e3c00000600000003000000000fe000000000000000000
% 00000000000000000f07c0e00000600000003000000000ff800000000000000000
% 00000000000000000e07c0e00000600000003000000000c7f00000000000000000
% 00000000000000001c0fc0600000600000003000000000c1fc0000000000000000
% 00000000000000001c0f80600000600000000000000000c03f8000000000000000
% 0000000000000000180f80600000000000000000000000800fe000000000000000
% 0000000000000000180f8060000000000ff800000000000001fc00000000000000
% 0000000000000000181f80e0000000003fff00000000000003fe00000000000000
% 0000000000000000181f00c0000000007fff8000000000000ffe00000000000000
% 00000000000000001c1f01c000000000ffffc000000000803ffc00000000000000
% 00000000000000000e3f038000000001ffffe000000000c1ffe000000000000000
% 00000000000000000ffe0f8000000003f80ff000000000c7ff8000000000000000
% 000000000000000007fc3fc000000007c001f000000000fffe0000000000000000
% 000000000000000001f87fe00000000780007800000000fff00000000000000000
% 000000000000000000003fc00000000780007800000000ffc00000000000000000
% 0000000000000000000000000000000700003800000000fe000000000000000000
% 0000000000000000000000000000000700003800000000f8000000000000000000
% 0000000000000000000000c00000000700003800000000e0000000000000000000
% 0000000000000000000000c0000000078000780c000000c0000000000000000000
% 0000000000000000000000c0000000038000700c000000c0000000000000000000
% 0000000000000000000000c000000001c000e00c00000080000000000000000000
% 000000000000000000ffffc000000000f807c01c00000000000000000000000000
% 000000000000000003ffffc000000007fffffffc00000078000000000000000000
% 000000000000000007ffffc000000007fffffffc000000fc000000000000000000
% 00000000000000000fffffc000000003fffffffc000001fc000000000000000000
% 00000000000000000fffffc000000003fffffffc000001fc000000000000000000
% 00000000000000001f8000c000000003fffffffc000001fc000000000000000000
% 00000000000000001e0000c0000000030000001c000001f8000000000000000000
% 00000000000000001e0000c0000000030000000c000001c0000000000000000000
% 00000000000000001c0000c0000000030000000c000000e0000c00000000000000
% 00000000000000001c000000000000030000000c00000070000c00000000000000
% 00000000000000001c00000000000000000000000000003c000c00000000000000
% 00000000000000000e0000c000000000000000000000001f800c00000000000000
% 0000000000000000060000c00000000000000000000000fffffc00000000000000
% 0000000000000000030000c00000000007f80000000001fffffc00000000000000
% 000000000000000001c000c0000000003fff0000000000fffffc00000000000000
% 00000000000003ffffffffc0000000007fff8000000000fffffc00000000000000
% 00000000000003ffffffffc000000000ffffc000000000fffffc00000000000000
% 00000000000003ffffffffc000000001ffffe000000000c0000c00000000000000
% 00000000000001ffffffffc000000003f807f000000000c0000c00000000000000
% 00000000000001ffffffffc0000000038000f000000000c0000c00000000000000
% 0000000000000180000000c00000000700003800000000c0000c00000000000000
% 0000000000000180000000c0000000060000180000000000000000000000000000
% 0000000000000180000000c0000000060000180000000000000000000000000000
% 0000000000000180000000c0000000060000180000000000200000000000000000
% 000000000000018000000000000000060000180000000007e1c000000000000000
% 00000000000000000000000000000007000038000000001fe1e000000000000000
% 000000000000000000007c0000000003800070000000003fe07000000000000000
% 00000000000000000c007f0000000003f807f0000000007fe03800000000000000
% 00000000000000000c001f8000000001ffffe000000000ffe01c00000000000000
% 00000000000000000c0001c000000000ffffc000000000f0601c00000000000000
% 00000000000000000c0000e0000000007fff8000000001c0600e00000000000000
% 00000000000000000c0000e0000000003ffe0000000001c0600e00000000000000
% 00000000000000000c0000e0000000000ff8000000000180600e00000000000000
% 00000000000000000c0001e0000000000000000000000180600e00000000000000
% 000000000000003fffffffe0000000000000000000000180600e00000000000000
% 000000000000003fffffffe000000001e0000000000001c0601e00000000000000
% 000000000000003fffffffc000000003f0000000000001c0601e00000000000000
% 0000000000000003ffffff8000000007f0000000000000e0603c00000000000000
% 00000000000000007fffff0000000007f0000000000000fc60fc00000000000000
% 00000000000000003c00000000000007f00000000000007ffff800000000000000
% 00000000000000001c00000000000007e00000000000003ffff800000000000000
% 00000000000000001c00000000000007000000000000001ffff000000000000000
% 00000000000000000c00000000000003800030000000000fffc000000000000000
% 00000000000000000000000000000001c000300000000003ff8000000000000000
% 00000000000000000000000000000000f000300000000000380000000000000000
% 0000000000000000000000c0000000007e00300000000000000000000000000000
% 0000000000000000000000c000000003fffff00000000000000000000000000000
% 0000000000000000000000c000000007fffff00000000000000000000000000000
% 0000000000000000000001c000000003fffff000000000000fe000000000000000
% 00000000000000f01fffffc000000003fffff000000001fe1ff000000000000000
% 00000000000001f81fffffc000000003fffff000000001fe3ff800000000000000
% 00000000000001f81fffffc00000000300003000000000fc7e3c00000000000000
% 00000000000001f80fffffc00000000300003000000000f07c0e00000000000000
% 00000000000000f00fffffc00000000300003000000000e07c0e00000000000000
% 00000000000000000c0000c00000000300003000000001c0fc0600000000000000
% 00000000000000000c0000c00000000000000000000001c0f80600000000000000
% 00000000000000000c0000c0000000000000000000000180f80600000000000000
% 00000000000000000c0000c000000000001f000000000180f80600000000000000
% 00000000000000000000000000000003001fc00000000181f80e00000000000000
% 000000000000000000000000000000030007e00000000181f00c00000000000000
% 0000000000000000000000c00000000300007000000001c1f01c00000000000000
% 0000000000000000000000c00000000300003800000000e3f03800000000000000
% 0000000000000000000000c00000000300003800000000ffe0f800000000000000
% 0000000000000000000001c000000003000038000000007fc3fc00000000000000
% 000000000000000001ffffc000000003000078000000001f87fe00000000000000
% 000000000000000003ffffc000000ffffffff8000000000003fc00000000000000
% 000000000000000007ffffc000000ffffffff80000000000000000000000000000
% 00000000000000000fffffc000000ffffffff00000000000000000000000000000
% 00000000000000001fffffc0000000ffffffe00000000000000000000000000000
% 00000000000000001f0000c00000001fffffc00000000000000000000000000000
% 00000000000000001e0000c00000000f0000000000000003fe0000000000000000
% 00000000000000001c0000c000000007000000000000000fff8000000000000000
% 00000000000000001c0000c000000007000000000000003fffe000000000000000
% 00000000000000001c00000000000003000000000000007ffff000000000000000
% 00000000000000001c0000c000000000000000000000007ffff800000000000000
% 00000000000000000e0000c00000000000000000000000fe01fc00000000000000
% 0000000000000000070000c00000000000000000000001f0003c00000000000000
% 000000000000000003e000c000000000003f8000000001c0000e00000000000000
% 000000000000000001ffffc000000007f87fc000000001c0000e00000000000000
% 000000000000000003ffffc000000007f8ffe00000000180000600000000000000
% 000000000000000007ffffc000000003f1f8f00000000180000600000000000000
% 00000000000000000fffffc000000003c1f0380000000180000600000000000000
% 00000000000000001fffffc00000000381f03800000001c0000e00000000000000
% 00000000000000001f0000c00000000703f01800000000c0000c00000000000000
% 00000000000000001e0000c00000000703e0180000000060001c00000000000000
% 00000000000000001c0000c00000000603e018000000003c00f800000000000000
% 00000000000000001c0000c00000000603e01800003ffffffff000000000000000
% 00000000000000001c0000000000000607e03800003ffffffff000000000000000
% 00000000000000000c0000c00000000607c03000001ffffffff800000000000000
% 00000000000000000e0000c00000000707c07000001ffffffffc00000000000000
% 0000000000000000070000c0000000038fc0e000001ffffffffe00000000000000
% 000000000000000003e000c000000003ff83e00000180000001e00000000000000
% 00000000000000001fffffc000000001ff0ff00000180000000000000000000000
% 00000000000000001fffffc0000000007e1ff80000180000000000000000000000
% 00000000000000001fffffc000000000000ff00000180000000000000000000000
% 00000000000000000fffffc0000000000000000000000000000000000000000000
% 00000000000000000fffffc0000000000000000000000000000000000000000000
% 00000000000000000c0000c00000000000003000000001ffc00000000000000000
% 00000000000000000c0000c0000000000000300000000ffff80000000000000000
% 00000000000000000c0000c0000000000000300000003ffffe0000000000000000
% 00000000000000000c0000c0000000000000700000007fffff0000000000000000
% 000000000000000000000000000000000001f0000000ffffffc000000000000000
% 00000000000000000000000000000000000ff0000001ffffffe000000000000000
% 00000000000000000000000000000000003ff0000003ff003ff000000000000000
% 0000000000000000000ff0000000000001fff0000007e00003f000000000000000
% 0000000000000001e03ffc000000000007fff000000f800000f800000000000000
% 00000000000003fff07fff00000000003ffff000000f0000003c00000000000000
% 00000000000001ffe0ffff8000000000fffe7000001c0000001c00000000000000
% 00000000000000ff01fe0f8000000007fff03000001c0000001c00000000000000
% 000000000000007c01f803c00000001fffc0300000380000000e00000000000000
% 000000000000007801f801c0000000ffff80300000380000000e00000000000000
% 00000000000000e003f000e0000003fffb80300000300000000600000000000000
% 00000000000000c003f000e000001fffc380000000300000000600000000000000
% 000000000000018003f0006000007fff0380000000300000000600000000000000
% 000000000000018007f000600000fff80380000000300000000600000000000000
% 000000000000038007e000600000ffe00380000000380000000600000000000000
% 000000000000030007e0006000007fc00380000000380000000e00000000000000
% 000000000000030007e0006000000ff00380000000380000000e00000000000000
% 00000000000003000fe000e0000003fe03800000001c0000001c00000000000000
% 00000000000003000fc000e00000007f83803000001e0000003c00000000000000
% 00000000000003800fc000c00000000ff3803000000f0000007800000000000000
% 00000000000003801fc001c000000003ff803000000fc00001f800000000000000
% 00000000000001c01f800380000000007f8030000007f00007f000000000000000
% 00000000000001e03f800780000000001ff070000003ff007fe000000000000000
% 00000000000000f8ff000f000000000003fff0000001ffffffc000000000000000
% 00000000000000ffff003f0000000000007ff0000000ffffff8000000000000000
% 000000000000007ffe00ff8000000000001ff00000007fffff0000000000000000
% 000000000000001ffc07ffe0000000000003f00000001ffffe0000000000000000
% 0000000000000007f00fffe0000000000000f000000007fff80000000000000000
% 00000000000000000007ffc00000000000007000000000ffc00000000000000000
% 000000000000000000000000000000000000700000000000000000000000000000
% 000000000000000000000000000000000000300000000000000000000000000000
% 000000000000000000000000000000000000300000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000005555554000000000000000000000000000000
% 000000000000000000000000000088808880880000000000000000000000000000
% 000000000000000000000000005555555555555000000000000000000000000000
% 000000000000000000000000022222220222222200000000000000000000000000
% 000000000000000000000000555555555555555550000000000000000000000000
% 000000000000000000000008888888888888888888000000000000000000000000
% 000000000000000000000055555555551555555555400000000000000000000000
% 000000000000000000000022222222220222222222200000000000000000000000
% 000000000000000000000555555555555555555555550000000000000000000000
% 000000000000000000000080808080800080808080808000000000000000000000
% 000000000000000000015555555555551555555555515000000000000000000000
% 000000000000000000022222222222220222222222202200000000000000000000
% 000000000000000000155555555555555555555555555540000000000000000000
% 000000000000000000880088888888880088888888880880000000000000000000
% 000000000000000001511155555555551555555555511554000000000000000000
% 000000000000000002000002222222220222222222200222000000000000000000
% 000000000000000015555555555555555555555555555555000000000000000000
% 000000000000000008800000888088800080888088800080800000000000000000
% 000000000000000155551111555555551155555555551155500000000000000000
% 000000000000000222220000222222200222222222200022220000000000000000
% 000000000000000555555555555555555555555555555555550000000000000000
% 000000000000000888888000088888880088888888880088888000000000000000
% 000000000000005555555111155555511155555555551155554000000000000000
% 000000000000002222222000022222200022222222200022222000000000000000
% 000000000000015555555555555555555555555555555555555400000000000000
% 000000000000008080808000008080800080808080800000808000000000000000
% 000000000000155555555511115555511155555555511155555500000000000000
% 000000000000222222222200002222200022222222200022222200000000000000
% 000000000000555555555555555555555555555555555555555540000000000000
% 000000000000888888888800008888800088888888800008888888000000000000
% 000000000001555555555551115555511155555555511155555554000000000000
% 000000000002222222222200002222200022222222000022222222000000000000
% 000000000005555555555555555555555555555555555555555555000000000000
% 000000000000888088808800000088800000888088000000888088800000000000
% 000000000015555555555511115555511155555555111155555555400000000000
% 000000000022222222222200002222200022222220000022222222200000000000
% 000000000055555555555555555555555555555555555555555555500000000000
% 000000000088888888888800000888800008888880000088888888880000000000
% 000000000555555555555511115555511115555511111155555555540000000000
% 000000000222222222222200002222000022222200000022222222220000000000
% 000000000555555555555555555555555555555555555555555555550000000000
% 000000000000808080808000000080800000808000000080808080808000000000
% 000000001515555555555511111555111115555111111555555555154000000000
% 000000002202222222222200002222000002220000000222222220222000000000
% 000000005555555555555555555555555555555555555555555555555000000000
% 000000008880088888888800000888800008880000000888888880088800000000
% 000000015551155555555551115555511155555111511555555511555400000000
% 000000022220022222222200000222000002200000002222222200222200000000
% 000000055555555555555555555555555555555555555555555555555400000000
% 000000008880008088808800000088000000880000008880888000808800000000
% 000000155555115555555511111555111115511111115555555111555500000000
% 000000222222000222222000000222000002200000022222220002222200000000
% 000000155555555555555555555555555555555555555555555555555540000000
% 000000088888000088888800000088000000800000008888880008888880000000
% 000000555555111155555511111555111115511111155555511115555550000000
% 000000222222000022222000000220000002000000022222200022222220000000
% 000001555555555555555555555555555555555555555555555555555550000000
% 000000808080800000808000000080000000800000008080000000808080000000
% 000005555555511115555511111155111111111111155555111155555554000000
% 000002222222200000222000000020000002000000222220000022222222000000
% 000005555555555555555555555555555555555555555555555555555555000000
% 000008888888880000088800000008000000000000088880000088888888000000
% 000015555555555111555551115111511151115111555551115155555555000000
% 000022222222220000022200000000000000000000222200000222222222000000
% 000015555555555555555555555555555555555555555555555555555555400000
% 000008808880880000008800000000000000000000808000000088808880800000
% 000055555555551111115511111111111111111111555111111555555555400000
% 000022222222220000000200000000000000000000220000000222222222200000
% 000155555555555555555555555555555555555555555555555555555555500000
% 000088888888888000000080000000000000000000880000000888888888880000
% 000155555555555111111151111111111111111111511111115555555555540000
% 000222222222222000000020000000000000000002200000002222222222200000
% 000555555555555555555555555555555555555555555555555555555555540000
% 000080808080808000000000000000000000000000000000008080808080800000
% 000555555555555511111111111111111111111111111111115555555555540000
% 000222000222222200000000000000000000000000000000022222222222220000
% 000555555555555555555555555555555555555555555555555555555555550000
% 000880000008888800000000000000000000000000000000088888888888808000
% 001511511155555511511151115111511151115111511151155555555555510000
% 002200000002222200000000000000000000000000000000022222222222000000
% 001555555555555555555555555555555555555555555555555555555555554000
% 000000000000888080000000000000000000000000000000088088808880008000
% 005111111111555551111111111111111111111111111111555555555555114000
% 002000000000222220000000000000000000000000000000222222222222002000
% 005555555555555555555555555555555555555555555555555555555555555000
% 008000000000088888000000000000000000000000000000888888888880008000
% 005155111111155555111111111111111111111111111111551115555551115000
% 000222200000022222000000000000000000000000000002200000222200022000
% 015555555555555555555555555555555555555555555555555555555555555000
% 008080800000000080000000000000000000000000000000000000000000008000
% 015555551111111555111111111111111111111111111111111111111111155400
% 022222220000000022000000000000000000000000000000000000000000022000
% 055555555555555555555555555555555555555555555555555555555555555400
% 008888888000000000800000000000000000000000000000000000000000088800
% 055555555151115111511151115111511151115111511151115111511151155400
% 022222222000000000000000000000000000000000000000000000000000222200
% 055555555555555555555555555555555555555555555555555555555555555500
% 088088808800000000000000000000000000000000000000000000000000088000
% 055555555511111111111111111111111111111111111111111111111111555500
% 022222222200000000000000000000000000000000000000000000000000222200
% 155555555555555555555555555555555555555555555555555555555555555500
% 088888888800000000000000000000000000000000000000000000000008888880
% 155555555511111111111111111111111111111111111111111111111115555500
% 022222222200000000000000000000000000000000000000000000000022222200
% 155555555555555555555555555555555555555555555555555555555555555540
% 008080808080000000000000000000000000000000000000000000008080808080
% 155555555551111111111111111111111111111111111111111115555555555540
% 222222222220000000000000000000000000000000000000000022222222222200
% 155555555555555555555555555555555555555555555555555555555555555540
% 088888888888000000000000000000000000000000000000000088888888888880
% 155555555555115111511151115111511151115111511151115555555555555540
% 222222222222000000000000000000000000000000000000002222222222222220
% 555555555555555555555555555555555555555555555555555555555555555540
% 088088808880880000000000000000000000000000000000008088808880888080
% 555555555555551111111111111111111111111111111111155555555555555540
% 222222222222222000000000000000000000000000000000022222222222222220
% 555555555555555555555555555555555555555555555555555555555555555540
% 088888888888888000000000000000000000000000000000008888888888888880
% 555555555555551111111111111111111111111111111111111555555555555550
% 222222222222200000000000000000000000000000000000000022222222222220
% 555555555555555555555555555555555555555555555555555555555555555550
% 808080808080000000000000000000000000000000000000000000008080808080
% 555555555111111111111111111111111111111111111111111111115555555550
% 222222220000000000000000000000000000000000000000000000000222222220
% 555555555555555555555555555555555555555555555555555555555555555550
% 888888000000000000000000000000000000000000000000000000000000888880
% 555511511151115111511151115111511151115111511151115111511151155550
% 222000000000000000000000000000000000000000000000000000000000002220
% 555555555555555555555555555555555555555555555555555555555555555550
% 800000000000000000000000000000000000000000000000000000000000000000
% 511111111111111111111111111111111111111111111111111111111111111150
% 220000000000000000000000000000000000000000000000000000000000000220
% 555555555555555555555555555555555555555555555555555555555555555550
% 888880000000000000000000000000000000000000000000000000000000088880
% 555555111111111111111111111111111111111111111111111111111111555550
% 222222200000000000000000000000000000000000000000000000000022222220
% 555555555555555555555555555555555555555555555555555555555555555550
% 808080808000000000000000000000000000000000000000000000008080808080
% 555555555551111111111111111111111111111111111111111111155555555550
% 222222222220000000000000000000000000000000000000000002222222222220
% 555555555555555555555555555555555555555555555555555555555555555540
% 888888888888880000000000000000000000000000000000000888888888888880
% 555555555555555111511151115111511151115111511151115555555555555540
% 222222222222222200000000000000000000000000000000022222222222222220
% 555555555555555555555555555555555555555555555555555555555555555540
% 088088808880888000000000000000000000000000000000000088808880888080
% 555555555555555511111111111111111111111111111111111155555555555540
% 222222222222222000000000000000000000000000000000000022222222222220
% 555555555555555555555555555555555555555555555555555555555555555540
% 088888888888888000000000000000000000000000000000000008888888888880
% 155555555555551111111111111111111111111111111111111115555555555540
% 222222222222200000000000000000000000000000000000000002222222222200
% 155555555555555555555555555555555555555555555555555555555555555540
% 008080808080000000000000000000000000000000000000000000808080808080
% 155555555511111111111111111111111111111111111111111111555555555540
% 222222220000000000000000000000000000000000000000000000222222222200
% 155555555555555555555555555555555555555555555555555555555555555500
% 088888800000000000000000000000000000000000000000000000088888888880
% 155555511151115111511151115111511151115111511151115111555555555500
% 022222000000000000000000000000000000000000000000000000022222222200
% 055555555555555555555555555555555555555555555555555555555555555500
% 088080000000000000000000000000000000000000000000000000008880888000
% 055551111111111111111111111111111111111111111111111111115555555500
% 022200000000000000000000000000000000000000000000000000002222222200
% 055555555555555555555555555555555555555555555555555555555555555400
% 008880000000000000000000000000000000000000000000000000000888888800
% 055511111111111111111111111111111111111111111115111111115555555400
% 022200000000000000000000000000000000000000000022000000002222222000
% 015555555555555555555555555555555555555555555555555555555555555400
% 008000000000000000000000000000000000000000000000800000000080808000
% 015511111111111115111111111111111111111111111115555111111155555000
% 002000002000000002000000000000000000000000000002222000000022220000
% 015555555555555555555555555555555555555555555555555555555555555000
% 008800088888800888000000000000000000000000000000888800000008800000
% 005111555555555551511151115111511151115111511151555511511151115000
% 002002222222222220000000000000000000000000000000222200000000002000
% 005555555555555555555555555555555555555555555555555555555555554000
% 000008808880888080000000000000000000000000000000088088000000008000
% 005115555555555551111111111111111111111111111111555555111111114000
% 002002222222222200000000000000000000000000000000222222000000020000
% 001555555555555555555555555555555555555555555555555555555555554000
% 000808888888888880000000000000000000000000000000088888800000088000
% 001555555555555511111111111111111111111111111111155555511111150000
% 000022222222222200000000000000000000000000000000022222200000220000
% 000555555555555555555555555555555555555555555555555555555555550000
% 000080808080808000000000000000000000000000000000008080808080800000
% 000555555555555111111115111111111111111111111111115555555555540000
% 000222222222222000000020000000000000000000000000002222222222220000
% 000155555555555555555555555555555555555555555555555555555555540000
% 000088888888888000000088000000000000000000080000000888888888880000
% 000155555555555111511151115111511151115111551151115555555555500000
% 000022222222220000000220000000000000000000020000002222222222200000
% 000055555555555555555555555555555555555555555555555555555555500000
% 000008808880888000000880000000000000000000008000000088808880800000
% 000055555555551111115551111111111111111111155111111555555555400000
% 000022222222220000022220000000000000000000022000000222222222000000
% 000015555555555555555555555555555555555555555555555555555555400000
% 000008888888880000088880000008000000800000008880000088888888800000
% 000005555555511111155551111111111111511111155551111155555555000000
% 000002222222200000222220000000000002200000022220000022222222000000
% 000005555555555555555555555555555555555555555555555555555554000000
% 000000808080800000808080000000000000800000008080000000808080000000
% 000001555555511115555511111115111111511111115555111155555554000000
% 000000222222000022222200000000000002200000022222000022222220000000
% 000001555555555555555555555555555555555555555555555555555550000000
% 000000888888800088888800000008000000880000008888880008888880000000
% 000000555555115555555551115155511155555111515555555115555540000000
% 000000222222000222222000000022000002220000022222220002222200000000
% 000000155555555555555555555555555555555555555555555555555540000000
% 000000008880000088808800000088000000880000008880888000808880000000
% 000000055555115555555111111155111115551111115555555111555500000000
% 000000022220022222222000000222000002220000022222222000222200000000
% 000000055555555555555555555555555555555555555555555555555400000000
% 000000008880088888888000000088000008888000008888888880888800000000
% 000000015551555555551111111555111115555111155555555551555000000000
% 000000002200222222220000000222000002220000022222222220222000000000
% 000000005555555555555555555555555555555555555555555555554000000000
% 000000000080808080800000008080800000808000008080808080008000000000
% 000000001515555555551111115555111115555111155555555555150000000000
% 000000000222222222200000022222000022222000022222222222020000000000
% 000000000555555555555555555555555555555555555555555555540000000000
% 000000000088888888800000088888800008888000088888888888880000000000
% 000000000155555555511151555555511155555111555555555555500000000000
% 000000000022222222200000222222000022222000022222222222200000000000
% 000000000055555555555555555555555555555555555555555555400000000000
% 000000000000888088800000888088800000888000008880888088800000000000
% 000000000015555555511115555555511155555111155555555555000000000000
% 000000000002222222200002222222200022222000022222222222000000000000
% 000000000005555555555555555555555555555555555555555554000000000000
% 000000000000888888800008888888800088888000088888888888000000000000
% 000000000001555555511155555555511155555111155555555550000000000000
% 000000000000222222200022222222200022222000022222222220000000000000
% 000000000000155555555555555555555555555555555555555540000000000000
% 000000000000008080800080808080800080808000008080808080000000000000
% 000000000000055555511155555555511155555511155555555400000000000000
% 000000000000022222200222222222200022222000022222222000000000000000
% 000000000000005555555555555555555555555555555555555000000000000000
% 000000000000000888800088888888880088888800008888888000000000000000
% 000000000000001555511155555555551155555511515555554000000000000000
% 000000000000000222200222222222200222222200002222220000000000000000
% 000000000000000155555555555555555555555555555555540000000000000000
% 000000000000000088800080888088800080888080000880880000000000000000
% 000000000000000055551155555555551155555551111155400000000000000000
% 000000000000000002220222222222220222222220000022000000000000000000
% 000000000000000005555555555555555555555555555555000000000000000000
% 000000000000000000880088888888880088888888800088000000000000000000
% 000000000000000000551155555555551555555555551140000000000000000000
% 000000000000000000020022222222220222222222222200000000000000000000
% 000000000000000000055555555555555555555555555400000000000000000000
% 000000000000000000008000808080800080808080808000000000000000000000
% 000000000000000000005555555555551555555555554000000000000000000000
% 000000000000000000000222222222220222222222220000000000000000000000
% 000000000000000000000155555555555555555555500000000000000000000000
% 000000000000000000000008888888888888888888800000000000000000000000
% 000000000000000000000005555555551555555554000000000000000000000000
% 000000000000000000000000222222220222222220000000000000000000000000
% 000000000000000000000000055555555555555400000000000000000000000000
% 000000000000000000000000000088808880888000000000000000000000000000
% 000000000000000000000000000155555555500000000000000000000000000000
% 000000000000000000000000000000222220000000000000000000000000000000
%%EndImage
%%EndPreview
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%EndProlog
%%Page 1 1
%
% Frame ps_prolog 5.5, for use with Adobe Unix Frame 5.5 products
%
% This ps_prolog file is Copyright (c) 1986-1996 Adobe Systems, Incoporated.
% All rights reserved.  This ps_prolog file may be freely copied and 
% distributed in conjunction with documents created using FrameMaker, 
% FrameMaker+SGML, FrameReader, and FrameViewer as long as this 
% copyright notice is preserved.
/FMDocSave save def
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.5) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	2 copy exch = = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsetsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orghalftone
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
	/tintGray
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known systemdict /currentdistillerparams known and {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix defaultmatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 1] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/tintCMYK {
	1 tintGray sub FrameCurColors 0 4 getinterval aload pop 	
	4 index mul 5 1 roll										
	3 index mul 5 1 roll										
	2 index mul 5 1 roll										
	mul 4 1 roll												
}bind def
/tintRGB {
	1 tintGray sub FrameCurColors 4 3 getinterval aload pop 	
	1 exch sub 3 index mul 1 exch sub 4 1 roll					
	1 exch sub 2 index mul 1 exch sub 4 1 roll					
	1 exch sub mul 1 exch sub 3 1 roll							
}bind def
/combineColor {
	/tintGray 1 1 FrameCurGray sub FrameCurColors 7 get mul sub def
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			tintCMYK FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				tintGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					tintCMYK
					RealSetcmykcolor
				} {
					tintRGB
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ tintGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{tintGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop tintGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop tintGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop tintGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix defaultmatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix defaultmatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	fMLevel1 {
		FMPColor {
			orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
		}
		{
			orgxfer cvx settransfer
		} ifelse
		orgfreq organgle orgproc cvx setscreen
	} {
		orghalftone sethalftone
	}ifelse
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	dup 1 gt {/#copies exch def} {pop} ifelse
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	fMLevel1 not {
		/orghalftone currenthalftone def
	}if 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMENDDOCUMENT {
	FMDocSave restore	
} def
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
	 statusdict /manualfeed true put
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	
	mark
	statusdict begin 
		/setpageparams where {
			pop
			paperwidth paperheight 0 1 
			{setpageparams} stopped 
		} { 
			true 
		} ifelse
		
		{
			
			/setpagedevice where {
				pop 
				1 dict dup begin
					/PageSize [ paperwidth paperheight ] def
				end 
				{setpagedevice} stopped
			} {
				true	
			} ifelse
		} {
			false		
		} ifelse 
	end
	{cleartomark true}{cleartomark false}ifelse
} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		8 1 roll
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
		8 -1 roll
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add dup 0 ne {div} {pop pop .5} ifelse fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	[FMsetsize 0 0 FMpointsize 0 0] makefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	/FMsetsize FMpointsize def
	F 
	} bind def
/QQ { 
	/FMsetsize exch def
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	2 copy 0.0 0.0 1.0 5 3 roll arc 
	round cvi 360 mod exch round cvi 360 mod eq {closepath} if 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
(5.5) FMVERSION
1 1 0 0 612 792 0 1 1 FMDOCUMENT
0 0 /NewCenturySchlbk-Roman FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
612 792 1 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 1 K
J
90 355.5 350 616.5 R
7 X
V
0 34 29 294 290 260 261 90 355.5 FMBEGINEPSF
%%For:arots arots
%%DocumentFonts:
save
countdictstack
mark
newpath
/showpage {} def
/setpagedevice {pop} def
%%Page 1 1
save /d_sv_obj exch def

userdict /IslandDrawDict 300 dict dup begin put

/bdef	{bind def} bind def
/E	{exch} bdef
/FF	{findfont} bdef
/MF	{makefont} bdef
/RO	{rotate} bdef
/SC	{scale} bdef
/SF	{setfont} bdef
/SG	{setgray} bdef
/TR	{translate} bdef
/bp	{lj lw rgb} bdef
/bpbw	{lj lw setgray} bdef
/c	{curveto} bdef
/cl	{closepath} bdef
/fi	{eofill} bdef
/g	{setgray} bdef
/gr	{grestore} bdef
/gs	{gsave} bdef
/l	{lineto} bdef
/lj	{setlinejoin} bdef
/lw	{setlinewidth} bdef
/m	{moveto} bdef
/n	{newpath} bdef
/nx	{/x E def} bdef
/r	{rmoveto} bdef
/rl	{rlineto} bdef
/rgb	{setrgbcolor} bdef
/s	{show} bdef
/sd	{setdash} bdef
/sp	{x 0 rmoveto} bdef
/ss	{currentpoint pop E m} bdef
/st	{stroke} bdef
%% pattern stuff
/BPSIDE	32 def	%% pixels per pattern side
/PATFREQ 3.0 def	%% pattern pixels per mm
/dp_mat [PATFREQ 0 0 PATFREQ 0 0] def
/dp_pw	BPSIDE def	%% pattern pixel width
/dp_ph	BPSIDE def	%% pattern pixel height
/dp_w	dp_pw PATFREQ div def	%% pattern mm width
/dp_h	dp_ph PATFREQ div def	%% pattern mm height
/savemat matrix def
/topmat matrix def
/patmat matrix def

%%	catch nocurrentpoint error for:		pathbbox
/ncpoint errordict /nocurrentpoint get def
errordict begin
/nocurrentpoint	{
	dup /pathbbox load eq
	{pop 0 0 1 1}
	{ncpoint}
	ifelse
} bdef
end
/ar	{ %% sa ea sx sy rot tx ty
	matrix currentmatrix 8 1 roll TR RO SC
	n 0 0 1 5 3 roll arc setmatrix
} bdef
/arn	{ %% sa ea sx sy rot tx ty
 TR RO SC
	matrix currentmatrix 8 1 roll
	n 0 0 1 5 3 roll arcn setmatrix
} bdef
/el	{ %% sx sy rot tx ty
	matrix currentmatrix 6 1 roll TR RO SC
	n 0 0 1 0 360 arc setmatrix cl
} bdef
/image_raster	{ %% sw sh sd dw dh xs ys
	TR SC /sd E def /sh E def /sw E def
	/imagebuf sw sd mul 7 add 8 idiv string def
	sw sh sd [sw 0 0 sh 0 0] { currentfile imagebuf readhexstring pop}
	image
} bdef
/imagemask_raster	{
	TR SC /sh E def /sw E def
	/imagebuf sw 7 add 8 idiv string def
	sw sh false [sw 0 0 sh 0 0]
	{currentfile imagebuf readhexstring pop}
	imagemask
} bdef
/dither_color_raster    { % bool sw sh sd dw dh xs ys
	TR SC /sd E def /sh E def /sw E def
	sd 8 eq and
	{
	  /imagebuf 3 string def
	  /grayval 1 string def
	  sw sh sd [sw 0 0 sh 0 0]
	  {
	    currentfile imagebuf readhexstring pop pop
	    imagebuf 0 get 0.299 mul
	    imagebuf 1 get 0.587 mul add
	    imagebuf 2 get 0.114 mul add cvi grayval exch 0 exch put grayval
	  }
	  image
	}
	{
	  /imagebuf sw 3 mul sd mul 7 add 8 idiv string def
	  sh { currentfile imagebuf readhexstring pop pop } repeat
	} ifelse
} bdef
/image_color_raster	{ % bool sw sh sd dw dh xs ys
	/colorimage where not
	{ dither_color_raster }
	{
	  pop
	  TR SC /sd E def /sh E def /sw E def pop
	  /imagebuf sw 3 mul sd mul 7 add 8 idiv string def
	  sw sh sd [sw 0 0 sh 0 0] { currentfile imagebuf readhexstring pop}
	  false 3 colorimage
	} ifelse
} bdef
/patpath	{
	/inv E def
	topmat setmatrix
	pathbbox	%% get lo - hi indecies
	/hy E dp_h div floor cvi def
	/hx E dp_w div floor cvi def
	/ly E dp_h div floor cvi def
	/lx E dp_w div floor cvi def
	lx 1 hx	{
	    dp_w mul
	    ly 1 hy {
		dp_h mul
		E dup 3 1 roll E
		patmat currentmatrix pop
		TR
		dp_pw dp_ph inv
		dp_mat dp_proc imagemask
		patmat setmatrix
	    } for
	    pop
	} for
} bdef
% setpattern brush of patterns instead of gray
/setpattern	{
	/blue E def /green E def /red E def
	/freq E def /bwidth E def /bpside E def
	/bstring E def
	/onbits 0 def /offbits 0 def
	freq 0 {/y E def /x E def
		/xindex x 1 add 2 div bpside mul cvi def
		/yindex y 1 add 2 div bpside mul cvi def
		bstring yindex bwidth mul xindex 8 idiv add get not
		1 7 xindex 8 mod sub bitshift and 0 ne
		{/onbits onbits 1 add def 1}
		{/offbits offbits 1 add def 0}
		ifelse
	} setscreen {} settransfer
	systemdict /setcmykcolor known
	{ /fact 1 onbits offbits onbits add div sub def
	1 red sub fact mul 1 green sub fact mul 1 blue sub fact mul 0
		setcmykcolor
	}
	{ offbits offbits onbits add div setgray}
	ifelse
} bdef
/dmatrix matrix def
/dpi 72 0 dmatrix defaultmatrix dtransform
	dup mul E dup mul add sqrt
def

/B	{gs bp st gr} bdef %% brush: gr lw lj
/Bbw	{gs bpbw st gr} bdef %% brush: gr lw lj
/F	{gs rgb eofill gr} bdef %% fill: gr
/Fbw	{gs setgray eofill gr} bdef %% fill: gr
/PB	{gs lj lw setpattern st gr} bdef
/PF	{gs eoclip patpath gr} bdef
/BB	{gs rgb lj lw strokepath clip patpath gr} bdef
/xdef {exch def} bdef
/clip_region {
  /ht xdef
  /wd xdef
  /bm xdef
  /lm xdef
  newpath
      lm bm moveto
      0 ht rlineto
      wd 0 rlineto
      0 ht neg rlineto
  closepath clip
} bdef
%! Island text prolog Version 3.1
%%
/reencode_small_dict 12 dict def
/ReencodeSmall {
reencode_small_dict begin
/new_codes_and_names exch def
/new_font_name exch def
/base_font_name exch def
/base_font_dict base_font_name findfont def
/newfont base_font_dict maxlength dict def
base_font_dict {
exch dup /FID ne
{ dup /Encoding eq
{ exch dup length array copy newfont 3 1 roll put }
{ exch newfont 3 1 roll put }
ifelse
}
{ pop pop }
ifelse
} forall
newfont /FontName new_font_name put
new_codes_and_names aload pop
new_codes_and_names length 2 idiv
{ newfont /Encoding get 3 1 roll put }
repeat
new_font_name newfont definefont pop
end     %reencode_small_dict
} def
/extended_Zapf [
8#223 /a89
8#224 /a90
8#225 /a93
8#226 /a94
8#227 /a91
8#230 /a92
8#231 /a205
8#232 /a85
8#233 /a206
8#234 /a86
8#235 /a87
8#236 /a88
8#237 /a95
8#240 /a96
] def
/extended_Standard [
29 /thorn
30 /yacute
31 /divide
128 /Acircumflex
129 /Adieresis
130 /Agrave
131 /Aring
132 /Atilde
133 /Ccedilla
134 /Eacute
135 /Ecircumflex
136 /Edieresis
137 /Egrave
138 /Iacute
139 /Icircumflex
140 /Idieresis
141 /Igrave
142 /Ntilde
143 /Oacute
144 /Ocircumflex
145 /Odieresis
146 /Ograve
147 /Otilde
148 /Scaron
149 /Uacute
150 /Ucircumflex
151 /Udieresis
152 /Ugrave
153 /Ydieresis
154 /Zcaron
155 /aacute
156 /acircumflex
157 /adieresis
158 /agrave
159 /aring
160 /atilde
161 /exclamdown
162 /cent
163 /sterling
164 /fraction
165 /yen
166 /florin
167 /section
168 /currency
169 /quotesingle
170 /quotedblleft
171 /guillemotleft
172 /guilsinglleft
173 /guilsinglright
174 /fi
175 /fl
176 /plusminus
177 /endash
178 /dagger
179 /daggerdbl
180 /periodcentered
181 /twosuperior
182 /paragraph
183 /bullet
184 /quotesinglbase
185 /quotedblbase
186 /quotedblright
187 /guillemotright
188 /ellipsis
189 /perthousand
190 /threesuperior
191 /questiondown
192 /mu
193 /grave
194 /acute
195 /circumflex
196 /tilde
197 /macron
198 /breve
199 /dotaccent
200 /dieresis
201 /onesuperior
202 /ring
203 /cedilla
204 /onequarter
205 /hungarumlaut
206 /ogonek
207 /caron
208 /emdash
209 /ccedilla
210 /copyright
211 /eacute
212 /ecircumflex
213 /edieresis
214 /egrave
215 /iacute
216 /icircumflex
217 /idieresis
218 /igrave
219 /logicalnot
220 /minus
221 /ntilde
222 /oacute
223 /ocircumflex
224 /odieresis
225 /AE
226 /onehalf
227 /ordfeminine
228 /ograve
229 /otilde
230 /registered
231 /scaron
232 /Lslash
233 /Oslash
234 /OE
235 /ordmasculine
236 /trademark
237 /uacute
238 /ucircumflex
239 /udieresis
240 /ugrave
241 /ae
242 /ydieresis
243 /zcaron
244 /Aacute
245 /dotlessi
246 /threequarters
247 /Eth
248 /lslash
249 /oslash
250 /oe
251 /germandbls
252 /multiply
253 /Yacute
254 /Thorn
255 /eth
] def
/extended_Symbol [
] def
/extend_font {  % stack: fontname newfontname
exch dup (ZapfDingbats) eq
{ cvn exch cvn extended_Zapf ReencodeSmall }
{ dup (Symbol) eq
{ cvn exch cvn extended_Symbol ReencodeSmall }
{ cvn exch cvn extended_Standard ReencodeSmall }
ifelse
}
ifelse
} bind def
/extend_font_name { % stack: font_name_string
dup length 1 add string /extended_font_name exch def
extended_font_name 0 (_) putinterval
extended_font_name 1 3 -1 roll putinterval
extended_font_name
} bind def
/gf {
/f exch def f cvn where
{ f exch begin cvn load exec setfont end }
{ f 0 f length 8 sub getinterval dup
/localfont exch extend_font_name def
localfont extend_font
localfont findfont
/xsz f f length 4 sub 4 getinterval cvi def
/ysz f f length 8 sub 4 getinterval cvi def
[ xsz 0 0 ysz neg 0 0 ] makefont dup f cvn exch def
setfont
}
ifelse
} bind def
/gfns {
/f exch def f cvn where
{ f exch begin cvn load exec setfont end }
{ f 0 f length 8 sub getinterval cvn findfont
/xsz f f length 4 sub 4 getinterval cvi def
/ysz f f length 8 sub 4 getinterval cvi def
[ xsz 0 0 ysz neg 0 0 ] makefont dup f cvn exch def
setfont
}
ifelse
} bind def
/ul { % space drop thickness
gs currentpoint currentlinewidth 
currentpoint n m 6 -3 roll 
lw 0 exch r
0 rl st lw m
gr 
} bind def
/nxtab { currentpoint pop 1000.0 mul cvi tab mod
	tab exch sub 1000.0 div 0 rmoveto } bind def
/nx { /x exch def } bind def
0. nx
gsave
0 0 324 324 clip_region
2.83465 -2.83465 scale 0 -114.3 translate
topmat currentmatrix pop
gsave
n -48.542 190.5 m -48.542 -76.2 l
154.66 -76.2 l
154.66 190.5 l
-48.542 190.5 l
cl eoclip
n 75.398 100.32 m 98.748 90.64 109.84 63.87 100.17 40.51 c
90.488 17.157 63.718 6.067 40.36 15.74 c
17.006 25.41 5.9148 52.19 15.59 75.55 c
25.264 98.9 52.038 109.99 75.398 100.32 c
cl 0 0.9333 0.7804 F
n 89.768 68.73 m 86.338 62.85 80.938 62.78 80.268 62.8 c
80.268 62.79 80.268 62.79 80.268 62.78 c
103.09 58.03 l
80.268 53.27 l
80.508 53.05 84.938 49.14 91.588 49.04 c
96.608 48.97 100.96 42.82 98.188 38.1 c
98.188 38.1 97.358 45.52 87.998 43.05 c
81.408 41.31 77.538 45.09 77.078 45.57 c
77.078 45.57 77.078 45.56 77.068 45.56 c
89.848 26.06 l
70.348 38.84 l
70.348 38.83 70.348 38.83 70.338 38.83 c
70.358 38.54 70.718 32.62 75.358 27.83 c
78.858 24.23 77.588 16.811 72.288 15.434 c
72.288 15.434 76.948 21.261 68.578 26.14 c
62.688 29.56 62.628 34.97 62.648 35.64 c
62.638 35.64 62.638 35.64 62.628 35.64 c
57.878 12.821 l
53.128 35.64 l
53.118 35.64 53.118 35.64 53.118 35.64 c
52.928 35.43 48.984 30.98 48.885 24.31 c
48.809 19.292 42.666 14.946 37.946 17.718 c
37.946 17.718 45.363 18.542 42.891 27.91 c
41.148 34.51 44.951 38.38 45.417 38.83 c
45.414 38.83 45.412 38.83 45.409 38.83 c
25.911 26.06 l
36.32 41.95 l
38.685 45.56 l
38.489 45.55 32.503 45.23 27.675 40.54 c
24.072 37.05 16.655 38.32 15.278 43.62 c
15.278 43.62 21.106 38.95 25.98 47.32 c
29.417 53.23 34.847 53.28 35.488 53.26 c
35.487 53.27 35.486 53.27 35.486 53.27 c
12.67 58.03 l
35.486 62.78 l
35.337 62.92 30.877 66.92 24.156 67.02 c
19.136 67.09 14.791 73.24 17.563 77.96 c
17.563 77.96 18.387 70.54 27.752 73.01 c
34.366 74.76 38.243 70.94 38.675 70.48 c
38.679 70.49 38.682 70.49 38.685 70.5 c
25.914 89.99 l
45.407 77.22 l
45.397 77.42 45.071 83.4 40.389 88.23 c
36.892 91.83 38.163 99.25 43.461 100.62 c
43.461 100.62 38.799 94.8 47.169 89.92 c
53.068 86.49 53.118 81.06 53.108 80.42 c
53.108 80.42 53.118 80.42 53.128 80.42 c
57.878 103.23 l
62.628 80.42 l
62.808 80.61 66.768 85.06 66.868 91.75 c
66.938 96.77 73.078 101.11 77.798 98.34 c
77.798 98.34 70.388 97.52 72.858 88.15 c
74.598 81.55 70.798 77.68 70.328 77.23 c
70.338 77.23 70.348 77.22 70.348 77.22 c
89.848 89.99 l
83.098 79.7 l
77.068 70.5 l
77.338 70.51 83.278 70.86 88.068 75.52 c
91.678 79.01 99.088 77.74 100.47 72.44 c
100.47 72.44 94.638 77.1 89.768 68.73 c
cl 1 0.851 0.06275 F
grestore
userdict /#copies 1 put
showpage
grestore

end d_sv_obj restore


cleartomark
countdictstack exch sub { end } repeat
restore

FMENDEPSF
0 48 Q
0 X
(Smithsonian) 369 526.5 T
(Astrophysical) 369 468.5 T
(Observatory) 369 410.5 T
FMENDPAGE
FMENDDOCUMENT
%%DocumentSuppliedFonts:
%%Trailer
cleartomark
countdictstack exch sub { end } repeat
restore
%%EOF
